/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;      
 *     }
 * }
 */
public class Solution {
    /**
     * @param l1: the first list
     * @param l2: the second list
     * @return: the sum list of l1 and l2 
     */
    public ListNode addLists2(ListNode l1, ListNode l2) {
        // write your code here
        if(l1 == null){
            return l2;
        }
        if(l2 == null){
            return l1;
        }

        l1 = reverseList(l1);
        l2 = reverseList(l2);
        
        ListNode head = new ListNode(0);
        ListNode point = head;
        int add = 0;   
        int val = 0; 
        
        while(l1!=null && l2!=null){
            val = add + l1.val + l2.val;
            point.next = new ListNode(val%10);
            add = val/10;
            l1 = l1.next;
            l2 = l2.next;
            point = point.next;
            val = 0;
        }
        

        while(l1!=null){
            val = add + l1.val;
            point.next = new ListNode(val%10);
            add = val/10;
            l1 = l1.next;
            point = point.next;
            val = 0;
        }

        while(l2!=null){
            val = add + l2.val;
            point.next = new ListNode(val%10);
            add = val/10;
            l2 = l2.next;
            point = point.next;
            val = 0;
        }
        
        if(add!=0){
            point.next = new ListNode(add);
        }
         
        ListNode t = head.next;
        ListNode newHead = reverseList(t);
        t.next = null;
        return newHead;
    }
     
    private ListNode reverseList(ListNode head){
        if(head == null || head.next == null){
            return head;
        }
        ListNode tail = head;
        ListNode cur = head;
        ListNode pre;
        ListNode temp;
        while(tail.next != null){
            pre = cur;
            cur = tail.next;
            temp = cur.next;
            cur.next = pre;
            tail.next = temp;
        }
        return cur;
    }
 }