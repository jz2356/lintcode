public class Solution {
    /**
     * @param n an integer
     * @return a list of Map.Entry<sum, probability>
     */
    public List<Map.Entry<Integer, Double>> dicesSum(int n) {
        // Write your code here
        // Ps. new AbstractMap.SimpleEntry<Integer, Double>(sum, pro)
        // to create the pair
        
        
        List<Map.Entry<Integer, Double>> results = new ArrayList<Map.Entry<Integer, Double>>();
        
        double[][] dp = new double[n + 1][6 * n + 1];
        for (int i = 1; i <7; i++)
            dp[1][i] = 1.0 / 6;

        for (int i = 2; i <n+1; i++)
            for (int j = i; j < 6 * n+1; j++) {
                for (int k = 1; k < 7; k++)
                    if (j > k)
                        dp[i][j] = dp[i][j] + dp[i - 1][j - k];

                dp[i][j] /= 6.0;
            }

        for (int i = n; i < 6 * n+1; i++) 
            results.add(new AbstractMap.SimpleEntry<Integer, Double>(i, dp[n][i]));

        return results;

    }
}