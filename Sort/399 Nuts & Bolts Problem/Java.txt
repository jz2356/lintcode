/**
 * public class NBCompare {
 *     public int cmp(String a, String b);
 * }
 * You can use compare.cmp(a, b) to compare nuts "a" and bolts "b",
 * if "a" is bigger than "b", it will return 1, else if they are equal,
 * it will return 0, else if "a" is smaller than "b", it will return -1.
 * When "a" is not a nut or "b" is not a bolt, it will return 2, which is not valid.
*/
public class Solution {
    /**
     * @param nuts: an array of integers
     * @param bolts: an array of integers
     * @param compare: a instance of Comparator
     * @return: nothing
     */
    public void sortNutsAndBolts(String[] nuts, String[] bolts, NBComparator compare) {
        if (nuts == null || bolts == null){
            return;
        }
        
        if(nuts.length != bolts.length){
            return;
        }

        Sort(nuts, bolts, compare, 0, nuts.length - 1);
    }
    
    public void Sort(String[] nuts, String[] bolts, NBComparator compare,int left,int right){
        if (left>=right){
            return;
        }
        
        int pivot = Part(nuts,bolts[left],compare,left,right);
        int temp = Part(bolts,nuts[pivot],compare,left,right);
        
        Sort(nuts,bolts,compare,left,pivot-1);
        Sort(nuts,bolts,compare,pivot+1,right);
    }
    
    public int Part(String[] S,String pivot,NBComparator compare,int left,int right){
         for(int i = left;i < right + 1;i++){
            if(compare.cmp(S[i], pivot)==0||compare.cmp(pivot, S[i])==0){//等于0是相等
                String t = S[left];
                S[left] = S[i];
                S[i] = t;
                break;
            }
        }
        
        String cur = S[left];
        int start = left;
        int end = right;
        while(start<end){
            while(start<end&&(compare.cmp(pivot,S[end])==1||compare.cmp(S[end],pivot)==-1)){
                //pivot大于S[end]
                end--;
            }
            S[start] = S[end];
            
            while(start<end&&(compare.cmp(pivot,S[start])==-1 || compare.cmp(S[start],pivot)==1)){
                //pivot小于S[start]
                start++;
            }
            S[end] = S[start];
            
        }
        
        S[start] = cur;
        
        return start;
 
    }
}